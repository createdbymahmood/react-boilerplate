/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
    useQuery,
    useMutation,
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from 'react-query';
import { xhrServiceInstance } from '../services/xhr/xhrService';
export type CreatePetsBody = {
    name: string;
    tag: string;
};

export type ListPetsParams = { limit?: string };

export interface Error {
    code: number;
    message: string;
}

export interface Pet {
    id: number;
    name: string;
    tag?: string;
}

export type Pets = Pet[];

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
    ...args: any
) => Promise<infer R>
    ? R
    : any;

/**
 * @summary List all pets
 */
export const listPets = (params?: ListPetsParams) => {
    return xhrServiceInstance<Pets>({ url: `/pets`, method: 'get', params });
};

export const getListPetsQueryKey = (params?: ListPetsParams) => [
    `/pets`,
    ...(params ? [params] : []),
];

export const useListPets = <
    TData = AsyncReturnType<typeof listPets>,
    TError = Error,
>(
    params?: ListPetsParams,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof listPets>,
            TError,
            TData
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof listPets>> = () =>
        listPets(params);

    const query = useQuery<AsyncReturnType<typeof listPets>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions,
    );

    return {
        queryKey,
        ...query,
    };
};

/**
 * @summary Create a pet
 */
export const createPets = (createPetsBody: CreatePetsBody) => {
    return xhrServiceInstance<void>({
        url: `/pets`,
        method: 'post',
        data: createPetsBody,
    });
};

export const useCreatePets = <TError = Error, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof createPets>,
        TError,
        { data: CreatePetsBody },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof createPets>,
        { data: CreatePetsBody }
    > = props => {
        const { data } = props || {};

        return createPets(data);
    };

    return useMutation<
        AsyncReturnType<typeof createPets>,
        TError,
        { data: CreatePetsBody },
        TContext
    >(mutationFn, mutationOptions);
};

/**
 * @summary Info for a specific pet
 */
export const showPetById = (petId: string) => {
    return xhrServiceInstance<Pet>({ url: `/pets/${petId}`, method: 'get' });
};

export const getShowPetByIdQueryKey = (petId: string) => [`/pets/${petId}`];

export const useShowPetById = <
    TData = AsyncReturnType<typeof showPetById>,
    TError = Error,
>(
    petId: string,
    options?: {
        query?: UseQueryOptions<
            AsyncReturnType<typeof showPetById>,
            TError,
            TData
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

    const queryFn: QueryFunction<AsyncReturnType<typeof showPetById>> = () =>
        showPetById(petId);

    const query = useQuery<AsyncReturnType<typeof showPetById>, TError, TData>(
        queryKey,
        queryFn,
        { enabled: !!petId, ...queryOptions },
    );

    return {
        queryKey,
        ...query,
    };
};
